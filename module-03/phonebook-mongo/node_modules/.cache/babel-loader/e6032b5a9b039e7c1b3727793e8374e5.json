{"ast":null,"code":"var _jsxFileName = \"/home/wickstjo/aalto/full-stack/module-02/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect, useState } from 'react';\nimport './css/general.scss';\nimport * as db_api from './funcs/db';\nimport Header from './components/header';\nimport { Field } from './components/input';\nimport List from './components/list';\nimport Form from './components/form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // LIST OF PEOPLE\n  const [people, set_people] = useState([]); // LOAD PEOPLE FROM JSON DB\n\n  useEffect(() => {\n    db_api.fetch_people().then(result => {\n      set_people(result);\n    });\n  }, []); // INPUT STATES\n\n  const [input, set_input] = useState({\n    name: '',\n    number: '',\n    filter: ''\n  }); // NOTIFICATION STATE\n\n  const [notification, set_notification] = useState({\n    name: '',\n    number: '',\n    filter: ''\n  }); // UPDATE INPUT STATES\n\n  const update_field = (category, value) => {\n    set_input({ ...input,\n      [category]: value\n    });\n  }; // ADD/UPDATE PERSON\n\n\n  const process_person = event => {\n    event.preventDefault(); // IF INPUT IS NOT EMPTY\n\n    if (input.name.length > 0 && input.number.length > 0) {\n      // CHECK IF THE PERSON ALREADY EXISTS\n      const filtered = people.filter(person => person.name === input.name); // CREATE PERSON OBJECT\n\n      const person = {\n        name: input.name,\n        number: input.number\n      }; // IF IT DOES, UPDATE PERSONS DETAILS\n\n      if (filtered.length !== 0) {\n        // FETCH THE PERSONS ID\n        const id = filtered[0].id; // UPDATE DATA\n\n        db_api.update_person(id, person).then(status => {\n          // IF SOMETHING WENT WRONG\n          if (status !== 200) {\n            console.log('COULD NOT UPDATE USER, ABORTING..');\n            return;\n          } // OTHERWISE, FIND THE OLD INDEX\n\n\n          const index = people.indexOf(filtered[0]); // CLONE CURRENT STATE\n\n          const temp = [...people]; // UPDATE PERSON IN TEMP STATE\n\n          temp[index] = { ...person,\n            id\n          }; // UPDATE BOTH STATES\n\n          set_people(temp);\n          set_input({\n            filter: input.filter,\n            name: '',\n            number: ''\n          });\n        });\n        return;\n      } // OTHERWISE, CREATE PERSON IN DB\n\n\n      db_api.create_person(person).then(result => {\n        // IF SOMETHING WENT WRONG, ABORT\n        if (result.status !== 201) {\n          console.log('COULD NOT CREATE USER, ABORTING..');\n          return;\n        } // OTHERWISE, PUSH ASSIGNED ID TO PERSON\n\n\n        person.id = result.id; // UPDATE BOTH STATES\n\n        set_people([...people, person]);\n        set_input({\n          filter: input.filter,\n          name: '',\n          number: ''\n        });\n      });\n    }\n  }; // PROCESS REMOVAL\n\n\n  const remove_person = id => {\n    // ATTEMPT TO REMOVE THE PERSON FROM THE DB\n    db_api.remove_person(id).then(status => {\n      // IF SOMETHING WENT WRONG, ABORT..\n      if (status !== 200) {\n        console.log('COULD NOT REMOVE PERSON, ABORTING..');\n        return;\n      } // OTHERWISE, FILTER OUT PERSON & UPDATE STATE\n\n\n      set_people(people.filter(person => person.id !== id));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      category: 'Phonebook',\n      message: 'Phonebook'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'splitter',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          text: 'Phonebook'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          label: 'Filter by Name',\n          value: input.filter,\n          func: event => update_field('filter', event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          data: people,\n          keyword: input.filter,\n          remove: remove_person\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          text: 'Add Person'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          trigger: process_person,\n          update: update_field,\n          fields: [{\n            id: 'name',\n            label: 'what is their name?',\n            value: input.name\n          }, {\n            id: 'number',\n            label: 'what is their number?',\n            value: input.number\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"qQCVhBzcw1p6lBmvVvefLeQsCTc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useEffect","useState","db_api","Header","Field","List","Form","App","people","set_people","fetch_people","then","result","input","set_input","name","number","filter","notification","set_notification","update_field","category","value","process_person","event","preventDefault","length","filtered","person","id","update_person","status","console","log","index","indexOf","temp","create_person","remove_person","target","label"],"sources":["/home/wickstjo/aalto/full-stack/module-02/phonebook/src/App.js"],"sourcesContent":["import { Fragment, useEffect, useState } from 'react'\nimport './css/general.scss'\nimport * as db_api from './funcs/db'\n\nimport Header from './components/header';\nimport { Field } from './components/input';\nimport List from './components/list';\nimport Form from './components/form';\n\nconst App = () => {\n\n    // LIST OF PEOPLE\n    const [people, set_people] = useState([])\n\n    // LOAD PEOPLE FROM JSON DB\n    useEffect(() => {\n        db_api.fetch_people().then(result => {\n            set_people(result)\n        })\n    }, [])\n\n    // INPUT STATES\n    const [input, set_input] = useState({\n        name: '',\n        number: '',\n        filter: ''\n    })\n\n    // NOTIFICATION STATE\n    const [notification, set_notification] = useState({\n        name: '',\n        number: '',\n        filter: ''\n    })\n\n    // UPDATE INPUT STATES\n    const update_field = (category, value) => {\n        set_input({\n            ...input,\n            [category]: value\n        })\n    }\n\n    // ADD/UPDATE PERSON\n    const process_person = event => {\n        event.preventDefault();\n        \n        // IF INPUT IS NOT EMPTY\n        if (input.name.length > 0 && input.number.length > 0) {\n\n            // CHECK IF THE PERSON ALREADY EXISTS\n            const filtered = people.filter(person => person.name === input.name)\n\n            // CREATE PERSON OBJECT\n            const person = {\n                name: input.name,\n                number: input.number\n            }\n\n            // IF IT DOES, UPDATE PERSONS DETAILS\n            if (filtered.length !== 0) {\n                \n                // FETCH THE PERSONS ID\n                const id = filtered[0].id;\n\n                // UPDATE DATA\n                db_api.update_person(id, person).then(status => {\n                    \n                    // IF SOMETHING WENT WRONG\n                    if (status !== 200) {\n                        console.log('COULD NOT UPDATE USER, ABORTING..')\n                        return\n                    }\n\n                    // OTHERWISE, FIND THE OLD INDEX\n                    const index = people.indexOf(filtered[0])\n\n                    // CLONE CURRENT STATE\n                    const temp = [ ...people ]\n                    \n                    // UPDATE PERSON IN TEMP STATE\n                    temp[index] = {\n                        ...person,\n                        id\n                    }\n\n                    // UPDATE BOTH STATES\n                    set_people(temp);\n                    set_input({\n                        filter: input.filter,\n                        name: '',\n                        number: ''\n                    })\n                })\n            \n                return\n            }\n\n            // OTHERWISE, CREATE PERSON IN DB\n            db_api.create_person(person).then(result => {\n\n                // IF SOMETHING WENT WRONG, ABORT\n                if (result.status !== 201) {\n                    console.log('COULD NOT CREATE USER, ABORTING..')\n                    return\n                }\n\n                // OTHERWISE, PUSH ASSIGNED ID TO PERSON\n                person.id = result.id;\n\n                // UPDATE BOTH STATES\n                set_people([\n                    ...people,\n                    person\n                ])\n\n                set_input({\n                    filter: input.filter,\n                    name: '',\n                    number: ''\n                })\n            })\n        }\n    }\n\n    // PROCESS REMOVAL\n    const remove_person = (id) => {\n\n        // ATTEMPT TO REMOVE THE PERSON FROM THE DB\n        db_api.remove_person(id).then(status => {\n            \n            // IF SOMETHING WENT WRONG, ABORT..\n            if (status !== 200) {\n                console.log('COULD NOT REMOVE PERSON, ABORTING..')\n                return\n            }\n\n            // OTHERWISE, FILTER OUT PERSON & UPDATE STATE\n            set_people(\n                people.filter(person => person.id !== id)\n            )\n        })\n    }\n\n    return (\n        <Fragment>\n            <Notification\n                category={ 'Phonebook' }\n                message={ 'Phonebook' }\n            />\n            <div className={ 'splitter' }>\n                <div>\n                    <Header text={ 'Phonebook' } />\n                    <Field\n                        label={ 'Filter by Name' }\n                        value={ input.filter }\n                        func={\n                            event => update_field('filter', event.target.value)\n                        }\n                    />\n                    <List\n                        data={ people }\n                        keyword={ input.filter }\n                        remove={ remove_person }\n                    />\n                </div>\n                <div>\n                    <Header text={ 'Add Person' } />\n                    <Form\n                        trigger={ process_person }\n                        update={ update_field }\n                        fields={[{\n                            id: 'name',\n                            label: 'what is their name?',\n                            value: input.name\n                        }, {\n                            id: 'number',\n                            label: 'what is their number?',\n                            value: input.number\n                        }]}\n                    />\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}